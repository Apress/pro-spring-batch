<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/batch"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:util="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
                    http://www.springframework.org/schema/beans/spring-beans-2.0.xsd 
					http://www.springframework.org/schema/util 
					http://www.springframework.org/schema/util/spring-util.xsd
					http://www.springframework.org/schema/batch 
	                http://www.springframework.org/schema/batch/spring-batch-2.1.xsd">

    <beans:import resource="../launch-context.xml" />

    <beans:bean id="transactionFile"
        class="org.springframework.core.io.FileSystemResource" scope="step">
        <beans:constructor-arg value="#{jobParameters[transactionFile]}" />
    </beans:bean>

    <beans:bean id="summaryFile"
        class="org.springframework.core.io.FileSystemResource" scope="step">
        <beans:constructor-arg value="#{jobParameters[summaryFile]}" />
    </beans:bean>

    <beans:bean id="transactionFileReader"
        class="com.apress.springbatch.chapter6.TransactionReader">
        <beans:property name="fieldSetReader" ref="fileItemReader" />
    </beans:bean>

    <beans:bean id="fileItemReader"
        class="org.springframework.batch.item.file.FlatFileItemReader">
        <beans:property name="resource" ref="transactionFile" />
        <beans:property name="lineMapper">
            <beans:bean
                class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <beans:property name="lineTokenizer">
                    <beans:bean
                        class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <beans:property name="delimiter"
                            value="," />
                    </beans:bean>
                </beans:property>
                <beans:property name="fieldSetMapper">
                    <beans:bean
                        class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" />
                </beans:property>
            </beans:bean>
        </beans:property>
    </beans:bean>

    <beans:bean id="transactionWriter"
        class="org.springframework.batch.item.database.JdbcBatchItemWriter">
        <beans:property name="assertUpdates" value="true" />
        <beans:property name="itemSqlParameterSourceProvider">
            <beans:bean
                class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
        </beans:property>
        <beans:property name="sql"
            value="INSERT INTO TRANSACTION (ACCOUNT_SUMMARY_ID, TIMESTAMP, AMOUNT) VALUES ((SELECT ID FROM ACCOUNT_SUMMARY WHERE ACCOUNT_NUMBER = :accountNumber), :timestamp, :amount)" />
        <beans:property name="dataSource" ref="dataSource" />
    </beans:bean>

    <beans:bean id="accountSummaryReader"
        class="org.springframework.batch.item.database.JdbcCursorItemReader">
        <beans:property name="dataSource" ref="dataSource" />
        <beans:property name="sql"
            value="select account_number, current_balance from account_summary a where a.id in (select distinct t.account_summary_id from transaction t) order by a.account_number" />
        <beans:property name="rowMapper">
            <beans:bean
                class="com.apress.springbatch.chapter6.AccountSummaryRowMapper" />
        </beans:property>
    </beans:bean>

    <beans:bean id="accountSummaryWriter"
        class="org.springframework.batch.item.file.FlatFileItemWriter"
        scope="step">
        <beans:property name="lineAggregator">
            <beans:bean
                class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
                <beans:property name="delimiter" value="," />
                <beans:property name="fieldExtractor">
                    <beans:bean
                        class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
                        <beans:property name="names"
                            value="accountNumber,currentBalance" />
                    </beans:bean>
                </beans:property>
            </beans:bean>
        </beans:property>
        <beans:property name="resource" ref="summaryFile" />
    </beans:bean>

    <beans:bean id="accountSummaryUpdater"
        class="org.springframework.batch.item.database.JdbcBatchItemWriter">
        <beans:property name="assertUpdates" value="true" />
        <beans:property name="itemSqlParameterSourceProvider">
            <beans:bean
                class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
        </beans:property>
        <beans:property name="sql"
            value="UPDATE ACCOUNT_SUMMARY SET CURRENT_BALANCE = :currentBalance WHERE ACCOUNT_NUMBER = :accountNumber" />
        <beans:property name="dataSource" ref="dataSource" />
    </beans:bean>

    <beans:bean id="transactionDao"
        class="com.apress.springbatch.chapter6.TransactionDaoImpl">
        <beans:property name="dataSource" ref="dataSource" />
    </beans:bean>

    <beans:bean id="transactionApplierProcessor"
        class="com.apress.springbatch.chapter6.TransactionApplierProcessor">
        <beans:property name="transactionDao" ref="transactionDao" />
    </beans:bean>

    <step id="importTransactionFileStep">
        <tasklet allow-start-if-complete="true">
            <chunk reader="transactionFileReader" writer="transactionWriter"
                commit-interval="10">
                <streams>
                    <stream ref="fileItemReader" />
                </streams>
            </chunk>
            <listeners>
                <listener ref="transactionFileReader" />
            </listeners>
        </tasklet>
    </step>

    <step id="generateAccountSummaryStep">
        <tasklet allow-start-if-complete="true">
            <chunk reader="accountSummaryReader" writer="accountSummaryWriter"
                commit-interval="10" />
        </tasklet>
    </step>

    <step id="applyTransactionsStep">
        <tasklet allow-start-if-complete="true">
            <chunk reader="accountSummaryReader" processor="transactionApplierProcessor"
                writer="accountSummaryUpdater" commit-interval="10" />
        </tasklet>
    </step>

    <job id="transactionJob">
        <step id="step1" parent="importTransactionFileStep">
            <stop on="STOPPED" restart="step1" />
            <next on="*" to="step2" />
        </step>
        <step id="step2" parent="applyTransactionsStep" next="step3" />
        <step id="step3" parent="generateAccountSummaryStep" />
    </job>
</beans:beans>